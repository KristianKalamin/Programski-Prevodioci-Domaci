Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 $@2: %empty

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 body

    7 type: _TYPE

    8 parameter: %empty
    9          | type _ID

   10 body: _LBRACKET variable_list statement_list _RBRACKET

   11 variable_list: %empty
   12              | variable_list variable

   13 variable: type _ID _SEMICOLON

   14 statement_list: %empty
   15               | statement_list statement

   16 statement: compound_statement
   17          | assignment_statement
   18          | if_statement
   19          | return_statement
   20          | switch_statement

   21 $@3: %empty

   22 switch_statement: _SWITCH _LPAREN _ID $@3 _RPAREN _LBRACKET cases default _RBRACKET

   23 cases: case
   24      | cases case

   25 $@4: %empty

   26 case: _CASE literal $@4 _COLON case_body break

   27 case_body: statement
   28          | case_body _LBRACKET statement _RBRACKET

   29 break: %empty
   30      | _BREAK _SEMICOLON

   31 default: %empty
   32        | _DEFAULT _COLON statement

   33 compound_statement: _LBRACKET statement_list _RBRACKET

   34 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   35 num_exp: exp
   36        | num_exp _AROP exp

   37 exp: literal
   38    | _ID
   39    | function_call
   40    | _LPAREN num_exp _RPAREN

   41 literal: _INT_NUMBER
   42        | _UINT_NUMBER

   43 $@5: %empty

   44 function_call: _ID $@5 _LPAREN argument _RPAREN

   45 argument: %empty
   46         | num_exp

   47 if_statement: if_part
   48             | if_part _ELSE statement

   49 if_part: _IF _LPAREN rel_exp _RPAREN statement

   50 rel_exp: num_exp _RELOP num_exp

   51 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
_TYPE (258) 7
_IF (259) 49
_ELSE (260) 48
_RETURN (261) 51
_ID (262) 6 9 13 22 34 38 44
_INT_NUMBER (263) 41
_UINT_NUMBER (264) 42
_LPAREN (265) 6 22 40 44 49
_RPAREN (266) 6 22 40 44 49
_LBRACKET (267) 10 22 28 33
_RBRACKET (268) 10 22 28 33
_ASSIGN (269) 34
_SEMICOLON (270) 13 30 34 51
_AROP (271) 36
_RELOP (272) 50
_SWITCH (273) 22
_CASE (274) 26
_BREAK (275) 30
_DEFAULT (276) 32
_COLON (277) 26 32
ONLY_IF (278)


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
program (25)
    on left: 1, on right: 0
function_list (26)
    on left: 2 3, on right: 1 3
function (27)
    on left: 6, on right: 2 3
$@1 (28)
    on left: 4, on right: 6
$@2 (29)
    on left: 5, on right: 6
type (30)
    on left: 7, on right: 6 9 13
parameter (31)
    on left: 8 9, on right: 6
body (32)
    on left: 10, on right: 6
variable_list (33)
    on left: 11 12, on right: 10 12
variable (34)
    on left: 13, on right: 12
statement_list (35)
    on left: 14 15, on right: 10 15 33
statement (36)
    on left: 16 17 18 19 20, on right: 15 27 28 32 48 49
switch_statement (37)
    on left: 22, on right: 20
$@3 (38)
    on left: 21, on right: 22
cases (39)
    on left: 23 24, on right: 22 24
case (40)
    on left: 26, on right: 23 24
$@4 (41)
    on left: 25, on right: 26
case_body (42)
    on left: 27 28, on right: 26 28
break (43)
    on left: 29 30, on right: 26
default (44)
    on left: 31 32, on right: 22
compound_statement (45)
    on left: 33, on right: 16
assignment_statement (46)
    on left: 34, on right: 17
num_exp (47)
    on left: 35 36, on right: 34 36 40 46 50 51
exp (48)
    on left: 37 38 39 40, on right: 35 36
literal (49)
    on left: 41 42, on right: 26 37
function_call (50)
    on left: 44, on right: 39
$@5 (51)
    on left: 43, on right: 44
argument (52)
    on left: 45 46, on right: 44
if_statement (53)
    on left: 47 48, on right: 18
if_part (54)
    on left: 49, on right: 47 48
rel_exp (55)
    on left: 50, on right: 49
return_statement (56)
    on left: 51, on right: 19


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4
    type           go to state 5


State 1

    7 type: _TYPE .

    $default  reduce using rule 7 (type)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7
    type      go to state 5


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    6 function: type . _ID $@1 _LPAREN parameter _RPAREN $@2 body

    _ID  shift, and go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    6 function: type _ID . $@1 _LPAREN parameter _RPAREN $@2 body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 9


State 9

    6 function: type _ID $@1 . _LPAREN parameter _RPAREN $@2 body

    _LPAREN  shift, and go to state 10


State 10

    6 function: type _ID $@1 _LPAREN . parameter _RPAREN $@2 body

    _TYPE  shift, and go to state 1

    $default  reduce using rule 8 (parameter)

    type       go to state 11
    parameter  go to state 12


State 11

    9 parameter: type . _ID

    _ID  shift, and go to state 13


State 12

    6 function: type _ID $@1 _LPAREN parameter . _RPAREN $@2 body

    _RPAREN  shift, and go to state 14


State 13

    9 parameter: type _ID .

    $default  reduce using rule 9 (parameter)


State 14

    6 function: type _ID $@1 _LPAREN parameter _RPAREN . $@2 body

    $default  reduce using rule 5 ($@2)

    $@2  go to state 15


State 15

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 . body

    _LBRACKET  shift, and go to state 16

    body  go to state 17


State 16

   10 body: _LBRACKET . variable_list statement_list _RBRACKET

    $default  reduce using rule 11 (variable_list)

    variable_list  go to state 18


State 17

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 body .

    $default  reduce using rule 6 (function)


State 18

   10 body: _LBRACKET variable_list . statement_list _RBRACKET
   12 variable_list: variable_list . variable

    _TYPE  shift, and go to state 1

    $default  reduce using rule 14 (statement_list)

    type            go to state 19
    variable        go to state 20
    statement_list  go to state 21


State 19

   13 variable: type . _ID _SEMICOLON

    _ID  shift, and go to state 22


State 20

   12 variable_list: variable_list variable .

    $default  reduce using rule 12 (variable_list)


State 21

   10 body: _LBRACKET variable_list statement_list . _RBRACKET
   15 statement_list: statement_list . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 27
    _SWITCH    shift, and go to state 28

    statement             go to state 29
    switch_statement      go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 22

   13 variable: type _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 36


State 23

   49 if_part: _IF . _LPAREN rel_exp _RPAREN statement

    _LPAREN  shift, and go to state 37


State 24

   51 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 38
    _INT_NUMBER   shift, and go to state 39
    _UINT_NUMBER  shift, and go to state 40
    _LPAREN       shift, and go to state 41

    num_exp        go to state 42
    exp            go to state 43
    literal        go to state 44
    function_call  go to state 45


State 25

   34 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 46


State 26

   33 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 14 (statement_list)

    statement_list  go to state 47


State 27

   10 body: _LBRACKET variable_list statement_list _RBRACKET .

    $default  reduce using rule 10 (body)


State 28

   22 switch_statement: _SWITCH . _LPAREN _ID $@3 _RPAREN _LBRACKET cases default _RBRACKET

    _LPAREN  shift, and go to state 48


State 29

   15 statement_list: statement_list statement .

    $default  reduce using rule 15 (statement_list)


State 30

   20 statement: switch_statement .

    $default  reduce using rule 20 (statement)


State 31

   16 statement: compound_statement .

    $default  reduce using rule 16 (statement)


State 32

   17 statement: assignment_statement .

    $default  reduce using rule 17 (statement)


State 33

   18 statement: if_statement .

    $default  reduce using rule 18 (statement)


State 34

   47 if_statement: if_part .
   48             | if_part . _ELSE statement

    _ELSE  shift, and go to state 49

    $default  reduce using rule 47 (if_statement)


State 35

   19 statement: return_statement .

    $default  reduce using rule 19 (statement)


State 36

   13 variable: type _ID _SEMICOLON .

    $default  reduce using rule 13 (variable)


State 37

   49 if_part: _IF _LPAREN . rel_exp _RPAREN statement

    _ID           shift, and go to state 38
    _INT_NUMBER   shift, and go to state 39
    _UINT_NUMBER  shift, and go to state 40
    _LPAREN       shift, and go to state 41

    num_exp        go to state 50
    exp            go to state 43
    literal        go to state 44
    function_call  go to state 45
    rel_exp        go to state 51


State 38

   38 exp: _ID .
   44 function_call: _ID . $@5 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 43 ($@5)
    $default  reduce using rule 38 (exp)

    $@5  go to state 52


State 39

   41 literal: _INT_NUMBER .

    $default  reduce using rule 41 (literal)


State 40

   42 literal: _UINT_NUMBER .

    $default  reduce using rule 42 (literal)


State 41

   40 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 38
    _INT_NUMBER   shift, and go to state 39
    _UINT_NUMBER  shift, and go to state 40
    _LPAREN       shift, and go to state 41

    num_exp        go to state 53
    exp            go to state 43
    literal        go to state 44
    function_call  go to state 45


State 42

   36 num_exp: num_exp . _AROP exp
   51 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 54
    _AROP       shift, and go to state 55


State 43

   35 num_exp: exp .

    $default  reduce using rule 35 (num_exp)


State 44

   37 exp: literal .

    $default  reduce using rule 37 (exp)


State 45

   39 exp: function_call .

    $default  reduce using rule 39 (exp)


State 46

   34 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 38
    _INT_NUMBER   shift, and go to state 39
    _UINT_NUMBER  shift, and go to state 40
    _LPAREN       shift, and go to state 41

    num_exp        go to state 56
    exp            go to state 43
    literal        go to state 44
    function_call  go to state 45


State 47

   15 statement_list: statement_list . statement
   33 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 57
    _SWITCH    shift, and go to state 28

    statement             go to state 29
    switch_statement      go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 48

   22 switch_statement: _SWITCH _LPAREN . _ID $@3 _RPAREN _LBRACKET cases default _RBRACKET

    _ID  shift, and go to state 58


State 49

   48 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _SWITCH    shift, and go to state 28

    statement             go to state 59
    switch_statement      go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 50

   36 num_exp: num_exp . _AROP exp
   50 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 55
    _RELOP  shift, and go to state 60


State 51

   49 if_part: _IF _LPAREN rel_exp . _RPAREN statement

    _RPAREN  shift, and go to state 61


State 52

   44 function_call: _ID $@5 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 62


State 53

   36 num_exp: num_exp . _AROP exp
   40 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 63
    _AROP    shift, and go to state 55


State 54

   51 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 51 (return_statement)


State 55

   36 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 38
    _INT_NUMBER   shift, and go to state 39
    _UINT_NUMBER  shift, and go to state 40
    _LPAREN       shift, and go to state 41

    exp            go to state 64
    literal        go to state 44
    function_call  go to state 45


State 56

   34 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   36 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 65
    _AROP       shift, and go to state 55


State 57

   33 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 33 (compound_statement)


State 58

   22 switch_statement: _SWITCH _LPAREN _ID . $@3 _RPAREN _LBRACKET cases default _RBRACKET

    $default  reduce using rule 21 ($@3)

    $@3  go to state 66


State 59

   48 if_statement: if_part _ELSE statement .

    $default  reduce using rule 48 (if_statement)


State 60

   50 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 38
    _INT_NUMBER   shift, and go to state 39
    _UINT_NUMBER  shift, and go to state 40
    _LPAREN       shift, and go to state 41

    num_exp        go to state 67
    exp            go to state 43
    literal        go to state 44
    function_call  go to state 45


State 61

   49 if_part: _IF _LPAREN rel_exp _RPAREN . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _SWITCH    shift, and go to state 28

    statement             go to state 68
    switch_statement      go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 62

   44 function_call: _ID $@5 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 38
    _INT_NUMBER   shift, and go to state 39
    _UINT_NUMBER  shift, and go to state 40
    _LPAREN       shift, and go to state 41

    $default  reduce using rule 45 (argument)

    num_exp        go to state 69
    exp            go to state 43
    literal        go to state 44
    function_call  go to state 45
    argument       go to state 70


State 63

   40 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 40 (exp)


State 64

   36 num_exp: num_exp _AROP exp .

    $default  reduce using rule 36 (num_exp)


State 65

   34 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 34 (assignment_statement)


State 66

   22 switch_statement: _SWITCH _LPAREN _ID $@3 . _RPAREN _LBRACKET cases default _RBRACKET

    _RPAREN  shift, and go to state 71


State 67

   36 num_exp: num_exp . _AROP exp
   50 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 55

    $default  reduce using rule 50 (rel_exp)


State 68

   49 if_part: _IF _LPAREN rel_exp _RPAREN statement .

    $default  reduce using rule 49 (if_part)


State 69

   36 num_exp: num_exp . _AROP exp
   46 argument: num_exp .

    _AROP  shift, and go to state 55

    $default  reduce using rule 46 (argument)


State 70

   44 function_call: _ID $@5 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 72


State 71

   22 switch_statement: _SWITCH _LPAREN _ID $@3 _RPAREN . _LBRACKET cases default _RBRACKET

    _LBRACKET  shift, and go to state 73


State 72

   44 function_call: _ID $@5 _LPAREN argument _RPAREN .

    $default  reduce using rule 44 (function_call)


State 73

   22 switch_statement: _SWITCH _LPAREN _ID $@3 _RPAREN _LBRACKET . cases default _RBRACKET

    _CASE  shift, and go to state 74

    cases  go to state 75
    case   go to state 76


State 74

   26 case: _CASE . literal $@4 _COLON case_body break

    _INT_NUMBER   shift, and go to state 39
    _UINT_NUMBER  shift, and go to state 40

    literal  go to state 77


State 75

   22 switch_statement: _SWITCH _LPAREN _ID $@3 _RPAREN _LBRACKET cases . default _RBRACKET
   24 cases: cases . case

    _CASE     shift, and go to state 74
    _DEFAULT  shift, and go to state 78

    $default  reduce using rule 31 (default)

    case     go to state 79
    default  go to state 80


State 76

   23 cases: case .

    $default  reduce using rule 23 (cases)


State 77

   26 case: _CASE literal . $@4 _COLON case_body break

    $default  reduce using rule 25 ($@4)

    $@4  go to state 81


State 78

   32 default: _DEFAULT . _COLON statement

    _COLON  shift, and go to state 82


State 79

   24 cases: cases case .

    $default  reduce using rule 24 (cases)


State 80

   22 switch_statement: _SWITCH _LPAREN _ID $@3 _RPAREN _LBRACKET cases default . _RBRACKET

    _RBRACKET  shift, and go to state 83


State 81

   26 case: _CASE literal $@4 . _COLON case_body break

    _COLON  shift, and go to state 84


State 82

   32 default: _DEFAULT _COLON . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _SWITCH    shift, and go to state 28

    statement             go to state 85
    switch_statement      go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 83

   22 switch_statement: _SWITCH _LPAREN _ID $@3 _RPAREN _LBRACKET cases default _RBRACKET .

    $default  reduce using rule 22 (switch_statement)


State 84

   26 case: _CASE literal $@4 _COLON . case_body break

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _SWITCH    shift, and go to state 28

    statement             go to state 86
    switch_statement      go to state 30
    case_body             go to state 87
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 85

   32 default: _DEFAULT _COLON statement .

    $default  reduce using rule 32 (default)


State 86

   27 case_body: statement .

    $default  reduce using rule 27 (case_body)


State 87

   26 case: _CASE literal $@4 _COLON case_body . break
   28 case_body: case_body . _LBRACKET statement _RBRACKET

    _LBRACKET  shift, and go to state 88
    _BREAK     shift, and go to state 89

    $default  reduce using rule 29 (break)

    break  go to state 90


State 88

   28 case_body: case_body _LBRACKET . statement _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _SWITCH    shift, and go to state 28

    statement             go to state 91
    switch_statement      go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 89

   30 break: _BREAK . _SEMICOLON

    _SEMICOLON  shift, and go to state 92


State 90

   26 case: _CASE literal $@4 _COLON case_body break .

    $default  reduce using rule 26 (case)


State 91

   28 case_body: case_body _LBRACKET statement . _RBRACKET

    _RBRACKET  shift, and go to state 93


State 92

   30 break: _BREAK _SEMICOLON .

    $default  reduce using rule 30 (break)


State 93

   28 case_body: case_body _LBRACKET statement _RBRACKET .

    $default  reduce using rule 28 (case_body)
